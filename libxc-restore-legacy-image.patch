# HG changeset patch
# Parent 5aad910d0dc46d3fbd659d982bc7ba0001fefcbb

diff --git a/tools/libxc/xc_domain_restore.c b/tools/libxc/xc_domain_restore.c
--- a/tools/libxc/xc_domain_restore.c
+++ b/tools/libxc/xc_domain_restore.c
@@ -38,6 +38,7 @@
 
 #include <stdlib.h>
 #include <unistd.h>
+#include <arpa/inet.h>
 
 #include "xg_private.h"
 #include "xg_save_restore.h"
@@ -414,6 +415,44 @@
         return -1;
     }
 
+    /* Suspend images from legacy xenopsd contain a newline and 32-bit int
+     * We need to convert this int (big-endian) into a length that we can use
+     * to read the remainder of the record. Note, consuming the newline and int
+     * is not an option since we won't be able to read to EOF because legacy
+     * xenopsd keeps this fd open as it's also used for the hanshaking around
+     * the migration.
+     */
+    if ( RDEXACT(fd, qbuf, 9) ) {
+        PERROR("Error checking for legacy xenopsd QEMU signature");
+        free(qbuf);
+        return -1;
+    }
+
+    if ( *qbuf == '\n' && !memcmp(qbuf + 5, "QEVM", 4) ) {
+        DPRINTF("Read %d bytes of QEMU data\n", 4);
+        DPRINTF("Detected legacy xenopsd QEMU signature; translating...\n");
+
+        blen = ntohl( *((uint32_t*) &qbuf[1]) );
+        memmove(qbuf, qbuf + 5, 4);
+
+        tmp = realloc(qbuf, blen);
+        if ( !tmp ) {
+            ERROR("Error growing QEMU buffer to %d bytes", blen);
+            free(qbuf);
+            return -1;
+        }
+        qbuf = tmp;
+
+        if ( !(rc = RDEXACT(fd, qbuf + 4, blen - 4)) ) {
+            DPRINTF("Read %d bytes of QEMU data\n", blen - 4);
+            dlen = blen;
+        }
+        goto done_read_legacy_image;
+    } else {
+        dlen = 9;
+        DPRINTF("Read %d bytes of QEMU data\n", dlen);
+    }
+
     while( (rc = read(fd, qbuf+dlen, blen-dlen)) > 0 ) {
         DPRINTF("Read %d bytes of QEMU data\n", rc);
         dlen += rc;
@@ -431,6 +470,8 @@
         }
     }
 
+done_read_legacy_image:
+
     if ( rc < 0 ) {
         ERROR("Error reading QEMU data");
         free(qbuf);
