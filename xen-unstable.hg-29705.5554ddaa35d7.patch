# HG changeset patch
# User Andrew Cooper <andrew.cooper3@citrix.com>
# Date 1411646564 -3600
# Node ID 5554ddaa35d706ca8916501ceea34a2ff85f8ae1
# Parent  500475c104bfc8e69abf00c8d3111507d2443e89
tools/libxc: Avoid cacheflush toolstack hypercalls on x86

XEN_DOMCTL_cacheflush hypercalls are (and will always be) -ENOSYS on x86, but
xc_domain_cacheflush() is called often during domain build and migrate for
correct behaviour on ARM.

Stub xc_domain_cacheflush() out on x86 to remove its pressure on the global
domctl lock, and the hypercall overhead (which applies further pressure to the
already heavily-contended TLB flush lock).

Signed-off-by: Andrew Cooper <andrew.cooper3@citrix.com>
CC: Keir Fraser <keir@xen.org>
CC: Jan Beulich <JBeulich@suse.com>
CC: Tim Deegan <tim@xen.org>
CC: Ian Campbell <Ian.Campbell@citrix.com>
CC: Ian Jackson <Ian.Jackson@eu.citrix.com>
CC: Wei Liu <wei.liu2@citrix.com>
Acked-by: Ian Campbell <ian.campbell@citrix.com>

diff -r 500475c104bf -r 5554ddaa35d7 tools/libxc/xc_domain.c
--- a/tools/libxc/xc_domain.c
+++ b/tools/libxc/xc_domain.c
@@ -51,12 +51,22 @@ int xc_domain_create(xc_interface *xch,
 int xc_domain_cacheflush(xc_interface *xch, uint32_t domid,
                          xen_pfn_t start_pfn, xen_pfn_t nr_pfns)
 {
+#if defined (__i386__) || defined (__x86_64__)
+    /*
+     * The x86 architecture provides cache coherency guarantees which prevent
+     * the need for this hypercall.  Avoid the overhead of making a hypercall
+     * just for Xen to return -ENOSYS.
+     */
+    errno = ENOSYS;
+    return -1;
+#else
     DECLARE_DOMCTL;
     domctl.cmd = XEN_DOMCTL_cacheflush;
     domctl.domain = (domid_t)domid;
     domctl.u.cacheflush.start_pfn = start_pfn;
     domctl.u.cacheflush.nr_pfns = nr_pfns;
     return do_domctl(xch, &domctl);
+#endif
 }
 
 int xc_domain_pause(xc_interface *xch,
