Expose vcpus as multiple cores in a smaller number of sockets,
by adjusting the cpuid responses appropriately.

diff -r 4452fff79e34 tools/libxc/xc_domain.c
--- a/tools/libxc/xc_domain.c	Tue Dec 10 15:02:06 2013 +0000
+++ b/tools/libxc/xc_domain.c	Tue Dec 10 15:02:31 2013 +0000
@@ -719,6 +719,17 @@ int xc_domain_get_tsc_info(xc_interface 
 }
 
 
+int xc_domain_set_cores_per_socket(xc_interface *xch,
+                                   uint32_t domid,
+                                   uint32_t cores_per_socket)
+{
+    DECLARE_DOMCTL;
+    domctl.cmd = XEN_DOMCTL_setcorespersocket;
+    domctl.domain = (domid_t)domid;
+    domctl.u.setcorespersocket.cores_per_socket = cores_per_socket;
+    return do_domctl(xch, &domctl);
+}
+
 int xc_domain_maximum_gpfn(xc_interface *xch, domid_t domid)
 {
     return do_memory_op(xch, XENMEM_maximum_gpfn, &domid, sizeof(domid));
diff -r 4452fff79e34 tools/libxc/xenctrl.h
--- a/tools/libxc/xenctrl.h	Tue Dec 10 15:02:06 2013 +0000
+++ b/tools/libxc/xenctrl.h	Tue Dec 10 15:02:31 2013 +0000
@@ -1217,6 +1217,10 @@ int xc_domain_get_tsc_info(xc_interface 
 
 int xc_domain_disable_migrate(xc_interface *xch, uint32_t domid);
 
+int xc_domain_set_cores_per_socket(xc_interface *xch,
+				   uint32_t domid,
+				   uint32_t cores_per_socket);
+ 
 int xc_domain_maximum_gpfn(xc_interface *xch, domid_t domid);
 
 int xc_domain_increase_reservation(xc_interface *xch,
diff -r 4452fff79e34 xen/arch/x86/hvm/svm/svm.c
--- a/xen/arch/x86/hvm/svm/svm.c	Tue Dec 10 15:02:06 2013 +0000
+++ b/xen/arch/x86/hvm/svm/svm.c	Tue Dec 10 15:02:31 2013 +0000
@@ -1366,14 +1366,31 @@ static void svm_cpuid_intercept(
 {
     unsigned int input = *eax;
     struct vcpu *v = current;
+    unsigned int cores_per_socket = current->domain->cores_per_socket;
 
     hvm_cpuid(input, eax, ebx, ecx, edx);
 
     switch (input) {
+    case 0x00000001:
+        if ( cores_per_socket > 1 )
+        {
+            *ebx &= 0xFF00FFFF;
+            *ebx |= (2 * cores_per_socket & 0xFF) << 16;
+            *edx |= 0x1 << 28;
+        }
+        break;
     case 0x80000001:
         /* Fix up VLAPIC details. */
         if ( vlapic_hw_disabled(vcpu_vlapic(v)) )
             __clear_bit(X86_FEATURE_APIC & 31, edx);
+        if (cores_per_socket > 1)
+            *ecx |= cpufeat_mask(X86_FEATURE_CMP_LEGACY);
+        break;
+    case 0x80000008:
+        /* Make sure Number of CPU core is 1 when HTT=0 */
+        *ecx &= 0xFFFF0F00;
+        if ( cores_per_socket > 1 )
+            *ecx |= (2 * cores_per_socket - 1) & 0xFF;
         break;
     case 0x8000001c: 
     {
diff -r 4452fff79e34 xen/arch/x86/hvm/vmx/vmx.c
--- a/xen/arch/x86/hvm/vmx/vmx.c	Tue Dec 10 15:02:06 2013 +0000
+++ b/xen/arch/x86/hvm/vmx/vmx.c	Tue Dec 10 15:02:31 2013 +0000
@@ -1726,20 +1726,40 @@ static void vmx_cpuid_intercept(
     unsigned int input = *eax;
     struct segment_register cs;
     struct vcpu *v = current;
+    unsigned int cores_per_socket = current->domain->cores_per_socket;
 
     hvm_cpuid(input, eax, ebx, ecx, edx);
 
     switch ( input )
     {
-        case 0x80000001:
-            /* SYSCALL is visible iff running in long mode. */
-            vmx_get_segment_register(v, x86_seg_cs, &cs);
-            if ( cs.attr.fields.l )
-                *edx |= cpufeat_mask(X86_FEATURE_SYSCALL);
-            else
-                *edx &= ~(cpufeat_mask(X86_FEATURE_SYSCALL));
-
-            break;
+    case 0x00000001:
+        if ( cores_per_socket > 1 )
+        {
+            /* to fake out #vcpus per socket first force on HT/MC */
+            *edx |= cpufeat_mask(X86_FEATURE_HT);
+            /* and then inform guest of #cores per package */
+            *ebx &= 0xFF00FFFF;
+            *ebx |= (((cores_per_socket * 2) & 0xFF) << 16);
+        }
+        break;
+
+    case 0x00000004:
+        if (cores_per_socket > 1) {
+            /* fake out cores per socket */
+            *eax &= 0x3FFF; /* one thread, one core */
+            *eax |= (((cores_per_socket * 2) - 1) << 26);
+        }
+        break;
+
+    case 0x80000001:
+        /* SYSCALL is visible iff running in long mode. */
+        vmx_get_segment_register(v, x86_seg_cs, &cs);
+        if ( cs.attr.fields.l )
+            *edx |= cpufeat_mask(X86_FEATURE_SYSCALL);
+        else
+            *edx &= ~(cpufeat_mask(X86_FEATURE_SYSCALL));
+
+        break;
     }
 
     vpmu_do_cpuid(input, eax, ebx, ecx, edx);
diff -r 4452fff79e34 xen/common/domctl.c
--- a/xen/common/domctl.c	Tue Dec 10 15:02:06 2013 +0000
+++ b/xen/common/domctl.c	Tue Dec 10 15:02:31 2013 +0000
@@ -890,6 +890,21 @@ long do_domctl(XEN_GUEST_HANDLE_PARAM(xe
         break;
     }
 
+    case XEN_DOMCTL_setcorespersocket:
+    {
+        struct domain *d;
+
+        ret = -ESRCH;
+        d = rcu_lock_domain_by_id(op->domain);
+        if ( d != NULL )
+        {
+            d->cores_per_socket = op->u.setcorespersocket.cores_per_socket;
+            rcu_unlock_domain(d);
+            ret = 0;
+        }
+    }
+    break;
+
     default:
         ret = arch_do_domctl(op, d, u_domctl);
         break;
diff -r 4452fff79e34 xen/include/public/domctl.h
--- a/xen/include/public/domctl.h	Tue Dec 10 15:02:06 2013 +0000
+++ b/xen/include/public/domctl.h	Tue Dec 10 15:02:31 2013 +0000
@@ -903,6 +903,12 @@ DEFINE_XEN_GUEST_HANDLE(xen_domctl_runst
 /* Some vcpus are runnable, some are blocked */
 #define DOMAIN_RUNSTATE_partial_contention 5
 
+struct xen_domctl_setcorespersocket {
+    uint32_t cores_per_socket;
+};
+
+typedef struct xen_domctl_setcorespersocket xen_domctl_setcorespersocket_t;
+DEFINE_XEN_GUEST_HANDLE(xen_domctl_setcorespersocket_t);
 
 struct xen_domctl {
     uint32_t cmd;
@@ -974,6 +980,7 @@ struct xen_domctl {
 #define XEN_DOMCTL_getnodeaffinity               69
 #define XEN_DOMCTL_set_max_evtchn                70
 #define XEN_DOMCTL_get_runstate_info             98
+#define XEN_DOMCTL_setcorespersocket             99
 #define XEN_DOMCTL_gdbsx_guestmemio            1000
 #define XEN_DOMCTL_gdbsx_pausevcpu             1001
 #define XEN_DOMCTL_gdbsx_unpausevcpu           1002
@@ -1031,6 +1038,7 @@ struct xen_domctl {
         struct xen_domctl_set_virq_handler  set_virq_handler;
         struct xen_domctl_set_max_evtchn    set_max_evtchn;
         struct xen_domctl_runstate_info     domain_runstate;
+        struct xen_domctl_setcorespersocket setcorespersocket;
         struct xen_domctl_gdbsx_memio       gdbsx_guest_memio;
         struct xen_domctl_set_broken_page_p2m set_broken_page_p2m;
         struct xen_domctl_gdbsx_pauseunp_vcpu gdbsx_pauseunp_vcpu;
diff -r 4452fff79e34 xen/include/xen/sched.h
--- a/xen/include/xen/sched.h	Tue Dec 10 15:02:06 2013 +0000
+++ b/xen/include/xen/sched.h	Tue Dec 10 15:02:31 2013 +0000
@@ -412,6 +412,8 @@ struct domain
     spinlock_t runstate_lock;
     atomic_t runstate_missed_changes;
     domain_runstate_info_t runstate;
+
+    unsigned int cores_per_socket;
 };
 
 struct domain_setup_info
