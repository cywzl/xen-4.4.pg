diff -r fd28b0a47260 mk/xen-4.3.spec.in
--- a/mk/xen-4.3.spec.in
+++ b/mk/xen-4.3.spec.in
@@ -329,6 +329,7 @@ rm -rf $RPM_BUILD_ROOT
 %files dom0-tools
 %defattr(-,root,root,-)
 %{_sysconfdir}/bash_completion.d/xl.sh
+%{_sysconfdir}/pygrub/rules.d/oracle-5.6
 %{_sysconfdir}/rc.d/init.d/xen-watchdog
 %config %{_sysconfdir}/xen/oxenstored.conf
 %{_sysconfdir}/xen/scripts/hotplugpath.sh
diff -r fd28b0a47260 tools/pygrub/configs/oracle-5.6
--- /dev/null
+++ b/tools/pygrub/configs/oracle-5.6
@@ -0,0 +1,1 @@
+title blacklist Oracle.*uek.*
diff -r fd28b0a47260 tools/pygrub/setup.py
--- a/tools/pygrub/setup.py
+++ b/tools/pygrub/setup.py
@@ -25,5 +25,8 @@ setup(name='pygrub',
       package_dir={'grub': 'src', 'fsimage': 'src'},
       scripts = ["src/pygrub"],
       packages=pkgs,
-      ext_modules = [ fsimage ]
+      ext_modules = [ fsimage ],
+      data_files=[
+        ('/etc/pygrub/rules.d/',[ 'configs/oracle-5.6' ])
+        ]
       )
diff -r fd28b0a47260 tools/pygrub/src/pygrub
--- a/tools/pygrub/src/pygrub
+++ b/tools/pygrub/src/pygrub
@@ -27,6 +27,8 @@ import grub.GrubConf
 import grub.LiloConf
 import grub.ExtLinuxConf
 
+import syslog
+
 PYGRUB_VER = 0.6
 FS_READ_MAX = 1024 * 1024
 
@@ -570,7 +572,62 @@ class Grub:
                 self.selected_image = 0
             elif self.selected_image >= len(self.cf.images):
                 self.selected_image = len(self.cf.images) - 1
-        
+
+evaluation_lists = []
+
+def readRulesFile(fname):
+    rulefile = open(fname,"r")
+    for line in rulefile:
+        line = line.rstrip('\n')
+        if not re.match(line,"#"):
+            evaluation_lists.append(fname+":"+line)
+
+def readRulesFiles(directory):
+    if os.path.exists(directory):
+        for rulesfile in os.listdir(directory):
+            rulesfilepath = os.path.join(directory,rulesfile)
+            readRulesFile(rulesfilepath)
+
+def evaluateImageAgainstRule(image,ruletext):
+    p=re.compile(r'\s+')
+    elements=p.split(ruletext)
+
+    cand=""
+    ret=None
+
+    if elements[0]=="title":
+        cand=image.title
+
+    for i in range(2,len(elements)):
+        if elements[i] != "":
+            if re.search( elements[i], cand ):
+                if elements[1]=="blacklist":
+                    return None
+                if elements[1]=="prefer":
+                    return 2
+                if elements[1]=="accept":
+                    return 1
+    return 1
+
+def evaluateEntryAsSane(cf, entry):
+    for rule in evaluation_lists:
+        (fname,ruletext)=rule.split(":",1)
+        res = evaluateImageAgainstRule(cf.images[entry],ruletext)
+        if not res:
+            syslog.syslog("\""+ cf.images[entry].title+ "\" is blacklisted by "+rule)
+            return None
+    return 1
+
+def findSuitableDefault(cf, entry):
+    if (evaluateEntryAsSane(cf,entry)):
+        return entry
+
+    for i in range(len(cf.images)):
+        if i != entry:
+            if (evaluateEntryAsSane(cf,i)):
+                return i
+    return entry
+
 def get_entry_idx(cf, entry):
     # first, see if the given entry is numeric
     try:
@@ -610,6 +667,11 @@ def run_grub(file, entry, fs, cfg_args):
         curses.wrapper(run_main)
     else:
         sel = g.cf.default
+        try:
+            sel = findSuitableDefault(g.cf, g.cf.default)
+        except ValueError:
+            pass
+        syslog.syslog("\""+ g.cf.images[sel].title+ "\" will be started")
 
     # set the entry to boot as requested
     if entry is not None:
@@ -711,7 +773,9 @@ def format_simple(kernel, ramdisk, args,
 
 if __name__ == "__main__":
     sel = None
-    
+    syslog.openlog("PYGRUB");
+    readRulesFiles("/etc/pygrub/rules.d")
+
     def usage():
         print >> sys.stderr, "Usage: %s [-q|--quiet] [-i|--interactive] [-l|--list-entries] [-n|--not-really] [--output=] [--kernel=] [--ramdisk=] [--args=] [--entry=] [--output-directory=] [--output-format=sxp|simple|simple0] [--offset=] <image>" %(sys.argv[0],)
 
