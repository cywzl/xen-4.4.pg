# HG changeset patch
# User David Vrabel <david.vrabel@citrix.com>
# Date 1381738990 -7200
# Node ID a8e02fdab820f3d3ccffd8887a5c6583d2bc2306
# Parent  d4c149ad81bfb44f2b1dc3ab50e27a915c77b2f4
Add DOMCTL to limit the number of event channels a domain may use

Add XEN_DOMCTL_set_max_evtchn which may be used during domain creation to
set the maximum event channel port a domain may use.  This may be used to
limit the amount of Xen resources (global mapping space and xenheap) that
a domain may use for event channels.

A domain that does not have a limit set may use all the event channels
supported by the event channel ABI in use.

Signed-off-by: David Vrabel <david.vrabel@citrix.com>
Reviewed-by: Jan Beulich <jbeulich@suse.com>
Acked-by: Daniel De Graaf <dgdegra@tycho.nsa.gov>
Acked-by: Keir Fraser <keir@xen.org>

diff -r d4c149ad81bf -r a8e02fdab820 tools/flask/policy/policy/modules/xen/xen.if
--- a/tools/flask/policy/policy/modules/xen/xen.if	Mon Oct 14 10:22:07 2013 +0200
+++ b/tools/flask/policy/policy/modules/xen/xen.if	Mon Oct 14 10:23:10 2013 +0200
@@ -49,7 +49,7 @@ define(`create_domain_common', `
 			getdomaininfo hypercall setvcpucontext setextvcpucontext
 			getscheduler getvcpuinfo getvcpuextstate getaddrsize
 			getaffinity setaffinity };
-	allow $1 $2:domain2 { set_cpuid settsc setscheduler setclaim };
+	allow $1 $2:domain2 { set_cpuid settsc setscheduler setclaim  set_max_evtchn };
 	allow $1 $2:security check_context;
 	allow $1 $2:shadow enable;
 	allow $1 $2:mmu { map_read map_write adjust memorymap physmap pinpage mmuext_op };
diff -r d4c149ad81bf -r a8e02fdab820 tools/flask/policy/policy/modules/xen/xen.te
--- a/tools/flask/policy/policy/modules/xen/xen.te	Mon Oct 14 10:22:07 2013 +0200
+++ b/tools/flask/policy/policy/modules/xen/xen.te	Mon Oct 14 10:23:10 2013 +0200
@@ -76,7 +76,7 @@ allow dom0_t dom0_t:domain {
 	getpodtarget setpodtarget set_misc_info set_virq_handler
 };
 allow dom0_t dom0_t:domain2 {
-	set_cpuid gettsc settsc setscheduler
+	set_cpuid gettsc settsc setscheduler set_max_evtchn
 };
 allow dom0_t dom0_t:resource { add remove };
 
diff -r d4c149ad81bf -r a8e02fdab820 xen/common/domctl.c
--- a/xen/common/domctl.c	Mon Oct 14 10:22:07 2013 +0200
+++ b/xen/common/domctl.c	Mon Oct 14 10:23:10 2013 +0200
@@ -863,6 +863,14 @@ long do_domctl(XEN_GUEST_HANDLE_PARAM(xe
     }
     break;
 
+    case XEN_DOMCTL_set_max_evtchn:
+    {
+        d->max_evtchn_port = min_t(unsigned int,
+                                   op->u.set_max_evtchn.max_port,
+                                   INT_MAX);
+    }
+    break;
+
     default:
         ret = arch_do_domctl(op, d, u_domctl);
         break;
diff -r d4c149ad81bf -r a8e02fdab820 xen/common/event_channel.c
--- a/xen/common/event_channel.c	Mon Oct 14 10:22:07 2013 +0200
+++ b/xen/common/event_channel.c	Mon Oct 14 10:23:10 2013 +0200
@@ -168,10 +168,14 @@ static int get_free_port(struct domain *
         return -EINVAL;
 
     for ( port = 0; port_is_valid(d, port); port++ )
+    {
+        if ( port > d->max_evtchn_port )
+            return -ENOSPC;
         if ( evtchn_from_port(d, port)->state == ECS_FREE )
             return port;
+    }
 
-    if ( port == d->max_evtchns )
+    if ( port == d->max_evtchns || port > d->max_evtchn_port )
         return -ENOSPC;
 
     if ( !group_from_port(d, port) )
@@ -1230,6 +1234,7 @@ void evtchn_check_pollers(struct domain 
 int evtchn_init(struct domain *d)
 {
     evtchn_2l_init(d);
+    d->max_evtchn_port = INT_MAX;
 
     d->evtchn = alloc_evtchn_bucket(d, 0);
     if ( !d->evtchn )
diff -r d4c149ad81bf -r a8e02fdab820 xen/include/public/domctl.h
--- a/xen/include/public/domctl.h	Mon Oct 14 10:22:07 2013 +0200
+++ b/xen/include/public/domctl.h	Mon Oct 14 10:23:10 2013 +0200
@@ -852,6 +852,17 @@ struct xen_domctl_set_broken_page_p2m {
 typedef struct xen_domctl_set_broken_page_p2m xen_domctl_set_broken_page_p2m_t;
 DEFINE_XEN_GUEST_HANDLE(xen_domctl_set_broken_page_p2m_t);
 
+/*
+ * XEN_DOMCTL_set_max_evtchn: sets the maximum event channel port
+ * number the guest may use.  Use this limit the amount of resources
+ * (global mapping space, xenheap) a guest may use for event channels.
+ */
+struct xen_domctl_set_max_evtchn {
+    uint32_t max_port;
+};
+typedef struct xen_domctl_set_max_evtchn xen_domctl_set_max_evtchn_t;
+DEFINE_XEN_GUEST_HANDLE(xen_domctl_set_max_evtchn_t);
+
 struct xen_domctl {
     uint32_t cmd;
 #define XEN_DOMCTL_createdomain                   1
@@ -920,6 +931,7 @@ struct xen_domctl {
 #define XEN_DOMCTL_set_broken_page_p2m           67
 #define XEN_DOMCTL_setnodeaffinity               68
 #define XEN_DOMCTL_getnodeaffinity               69
+#define XEN_DOMCTL_set_max_evtchn                70
 #define XEN_DOMCTL_gdbsx_guestmemio            1000
 #define XEN_DOMCTL_gdbsx_pausevcpu             1001
 #define XEN_DOMCTL_gdbsx_unpausevcpu           1002
@@ -975,6 +987,7 @@ struct xen_domctl {
         struct xen_domctl_set_access_required access_required;
         struct xen_domctl_audit_p2m         audit_p2m;
         struct xen_domctl_set_virq_handler  set_virq_handler;
+        struct xen_domctl_set_max_evtchn    set_max_evtchn;
         struct xen_domctl_gdbsx_memio       gdbsx_guest_memio;
         struct xen_domctl_set_broken_page_p2m set_broken_page_p2m;
         struct xen_domctl_gdbsx_pauseunp_vcpu gdbsx_pauseunp_vcpu;
diff -r d4c149ad81bf -r a8e02fdab820 xen/include/xen/sched.h
--- a/xen/include/xen/sched.h	Mon Oct 14 10:22:07 2013 +0200
+++ b/xen/include/xen/sched.h	Mon Oct 14 10:23:10 2013 +0200
@@ -291,6 +291,7 @@ struct domain
     struct evtchn   *evtchn;                         /* first bucket only */
     struct evtchn  **evtchn_group[NR_EVTCHN_GROUPS]; /* all other buckets */
     unsigned int     max_evtchns;
+    unsigned int     max_evtchn_port;
     spinlock_t       event_lock;
     const struct evtchn_port_ops *evtchn_port_ops;
     struct evtchn_fifo_domain *evtchn_fifo;
diff -r d4c149ad81bf -r a8e02fdab820 xen/xsm/flask/hooks.c
--- a/xen/xsm/flask/hooks.c	Mon Oct 14 10:22:07 2013 +0200
+++ b/xen/xsm/flask/hooks.c	Mon Oct 14 10:23:10 2013 +0200
@@ -727,6 +727,9 @@ static int flask_domctl(struct domain *d
     case XEN_DOMCTL_audit_p2m:
         return current_has_perm(d, SECCLASS_HVM, HVM__AUDIT_P2M);
 
+    case XEN_DOMCTL_set_max_evtchn:
+        return current_has_perm(d, SECCLASS_DOMAIN2, DOMAIN2__SET_MAX_EVTCHN);
+
     default:
         printk("flask_domctl: Unknown op %d\n", cmd);
         return -EPERM;
diff -r d4c149ad81bf -r a8e02fdab820 xen/xsm/flask/policy/access_vectors
--- a/xen/xsm/flask/policy/access_vectors	Mon Oct 14 10:22:07 2013 +0200
+++ b/xen/xsm/flask/policy/access_vectors	Mon Oct 14 10:23:10 2013 +0200
@@ -194,6 +194,8 @@ class domain2
     setscheduler
 # XENMEM_claim_pages
     setclaim
+# XEN_DOMCTL_set_max_evtchn
+    set_max_evtchn
 }
 
 # Similar to class domain, but primarily contains domctls related to HVM domains
