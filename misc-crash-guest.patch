Add a simple tool to force a crash inside a guest

diff -r 082f6ce61e30 .hgignore
--- a/.hgignore
+++ b/.hgignore
@@ -250,6 +250,7 @@
 ^tools/vtpm/tpm_emulator/.*$
 ^tools/vtpm/vtpm/.*$
 ^tools/vtpm_manager/manager/vtpm_managerd$
+^tools/xcutils/crash_guest$
 ^tools/xcutils/lsevtchn$
 ^tools/xcutils/xc_restore$
 ^tools/xcutils/xc_save$
diff -r 082f6ce61e30 tools/xcutils/Makefile
--- a/tools/xcutils/Makefile
+++ b/tools/xcutils/Makefile
@@ -11,7 +11,7 @@
 XEN_ROOT	= $(CURDIR)/../..
 include $(XEN_ROOT)/tools/Rules.mk
 
-PROGRAMS = readnotes lsevtchn
+PROGRAMS = readnotes lsevtchn crash_guest
 
 CFLAGS += -Werror
 
@@ -19,6 +19,7 @@ CFLAGS_xc_restore.o := $(CFLAGS_libxenct
 CFLAGS_xc_save.o    := $(CFLAGS_libxenctrl) $(CFLAGS_libxenguest) $(CFLAGS_libxenstore)
 CFLAGS_readnotes.o  := $(CFLAGS_libxenctrl) $(CFLAGS_libxenguest)
 CFLAGS_lsevtchn.o   := $(CFLAGS_libxenctrl)
+CFLAGS_crash_guest.o:= $(CFLAGS_libxenctrl) $(CFLAGS_libxenstore)
 
 .PHONY: all
 all: build
@@ -38,6 +39,9 @@ readnotes: readnotes.o
 lsevtchn: lsevtchn.o
 	$(CC) $(LDFLAGS) $^ -o $@ $(LDLIBS_libxenctrl) $(APPEND_LDFLAGS)
 
+crash_guest: crash_guest.o
+	$(CC) $(LDFLAGS) $^ -o $@ $(LDLIBS_libxenctrl) $(APPEND_LDFLAGS)
+
 .PHONY: install
 install: build
 	$(INSTALL_DIR) $(DESTDIR)$(PRIVATE_BINDIR)
diff -r 082f6ce61e30 tools/xcutils/crash_guest.c
--- /dev/null
+++ b/tools/xcutils/crash_guest.c
@@ -0,0 +1,44 @@
+#include <err.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <syslog.h>
+#include <inttypes.h>
+
+#include <xenstore.h>
+#include <xenctrl.h>
+#include <xenguest.h>
+
+#include <xen/foreign/x86_64.h>
+
+int
+main(int argc, char **argv)
+{
+    xc_interface *xch;
+    int domid;
+    vcpu_guest_context_x86_64_t ctxt64;
+
+    if ( argc != 2 )
+        errx(1, "usage: crash_guest <domid>");
+
+    openlog("crash_guest", 0, LOG_USER);
+
+    domid = strtol(argv[1], NULL, 10);
+    if ( domid == 0 )
+        errx(1, "don't crash dom0");
+
+    syslog(LOG_NOTICE, "crash guest %d", domid);
+
+    xch = xc_interface_open(0,0,0);
+    if ( NULL == xch )
+        errx(1, "failed to open control interface");
+
+    if ( xc_vcpu_getcontext(xch, domid, 0, (void *)&ctxt64) < 0 )
+        err(1, "getting domid %d context", domid);
+    printf("RIP %" PRIx64 "\n", ctxt64.user_regs.rip);
+    ctxt64.user_regs.rip = 0xf001;
+    if ( xc_vcpu_setcontext(xch, domid, 0, (void *)&ctxt64) < 0 )
+        err(1, "setting domid %d context", domid);
+
+    return 0;
+}
