# HG changeset patch
# Parent 3e3e3f1ebc69ec81793b7d437c593911c60d9adc

diff -r 3e3e3f1ebc69 xen/arch/x86/cpu/amd.c
--- a/xen/arch/x86/cpu/amd.c
+++ b/xen/arch/x86/cpu/amd.c
@@ -367,7 +367,7 @@ static void __devinit amd_get_topology(s
 static void __devinit init_amd(struct cpuinfo_x86 *c)
 {
 	u32 l, h;
-
+	int fma4_user_masked;
 	unsigned long long value;
 
 	/* Disable TLB flush filter by setting HWCR.FFDIS on K8
@@ -526,8 +526,39 @@ static void __devinit init_amd(struct cp
 	if ((smp_processor_id() == 1) && c1_ramping_may_cause_clock_drift(c))
 		disable_c1_ramping();
 
+	/* Bugfix for Ubuntu 12.04 installer.  XSAVE is not enabled by default
+	 * on Xen 4.1, but glibc in 12.04 incorrectly tried to AVX
+	 * instructions, and dies with an illegal opcode exception.  If the
+	 * user has not explicitly requested XSAVE support, mask it out on
+	 * boot. */
+	if ( !use_xsave )
+	{
+		if (c->x86 == 0x15 && c->x86_model <= 0x02)
+		{
+			if (!(opt_cpuid_mask_ext_ecx & 0x10000))
+				fma4_user_masked = 1;
+
+			printk(KERN_DEBUG "CPU: Masking FMA4 CPUID feature\n");
+			/* Mask FMA4 */
+			opt_cpuid_mask_ext_ecx &= 0xfffeffff;
+		}
+	}
+
 	set_cpuidmask(c);
 
+	/*
+	 * Put FMA4 feature back into mask variables IFF it was not masked on
+	 * command line, so XAPI allows Rolling Pool Upgrade to work
+	 */
+	if ( !use_xsave )
+	{
+		if (c->x86 == 0x15 && c->x86_model <= 0x02 && !fma4_user_masked)
+		{
+			c->boot_ext_ecx |= 0x10000;
+			c->masked_ext_ecx |= 0x10000;
+		}
+	}
+
 	check_syscfg_dram_mod_en();
 }
 
diff -r 3e3e3f1ebc69 xen/arch/x86/cpu/common.c
--- a/xen/arch/x86/cpu/common.c
+++ b/xen/arch/x86/cpu/common.c
@@ -15,7 +15,7 @@
 
 #include "cpu.h"
 
-static bool_t __cpuinitdata use_xsave = 0;
+bool_t __cpuinitdata use_xsave = 0;
 boolean_param("xsave", use_xsave);
 
 unsigned int __devinitdata opt_cpuid_mask_ecx = ~0u;
diff -r 3e3e3f1ebc69 xen/arch/x86/cpu/cpu.h
--- a/xen/arch/x86/cpu/cpu.h
+++ b/xen/arch/x86/cpu/cpu.h
@@ -14,6 +14,7 @@ extern struct cpu_dev * cpu_devs [X86_VE
 extern unsigned int opt_cpuid_mask_ecx, opt_cpuid_mask_edx;
 extern unsigned int opt_cpuid_mask_xsave_eax;
 extern unsigned int opt_cpuid_mask_ext_ecx, opt_cpuid_mask_ext_edx;
+extern bool_t use_xsave;
 
 extern int get_model_name(struct cpuinfo_x86 *c);
 extern void display_cacheinfo(struct cpuinfo_x86 *c);
