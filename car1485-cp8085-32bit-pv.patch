diff -r e1f340e7bd25 tools/libxc/saverestore/common.h
--- a/tools/libxc/saverestore/common.h	Mon Apr 07 14:27:02 2014 +0100
+++ b/tools/libxc/saverestore/common.h	Mon Apr 07 14:28:55 2014 +0100
@@ -67,8 +67,12 @@ struct context
 
             /* Maximum Xen frame */
             unsigned long max_mfn;
-            /* Read-only machine to phys map */
+            /* Read-only machine to phys map.
+             * This is always a mapping to Xen
+             */
             xen_pfn_t *m2p;
+            /* firtst m2p mfn */
+            xen_pfn_t m2p_mfn0;
             /* Number of m2p frames mapped */
             unsigned long nr_m2p_frames;
 
diff -r e1f340e7bd25 tools/libxc/saverestore/common_x86_pv.c
--- a/tools/libxc/saverestore/common_x86_pv.c	Mon Apr 07 14:27:02 2014 +0100
+++ b/tools/libxc/saverestore/common_x86_pv.c	Mon Apr 07 14:28:55 2014 +0100
@@ -198,6 +198,7 @@ int x86_pv_map_m2p(struct context *ctx)
     }
 
     ctx->x86_pv.nr_m2p_frames = (M2P_CHUNK_SIZE >> PAGE_SHIFT) * m2p_chunks;
+    ctx->x86_pv.m2p_mfn0 = entries[0].mfn;
 
     /* All Done */
     rc = 0;
diff -r e1f340e7bd25 tools/libxc/saverestore/restore_x86_pv.c
--- a/tools/libxc/saverestore/restore_x86_pv.c	Mon Apr 07 14:27:02 2014 +0100
+++ b/tools/libxc/saverestore/restore_x86_pv.c	Mon Apr 07 14:28:55 2014 +0100
@@ -427,10 +427,30 @@ static int handle_x86_pv_info(struct con
     }
     else if ( info->guest_width != ctx->x86_pv.width )
     {
-        ERROR("Width of guest in stream (%"PRIu32
-              " bits) differs with existing domain (%"PRIu32" bits)",
-              info->guest_width * 8, ctx->x86_pv.width * 8);
-        return -1;
+        int rc;
+        struct xen_domctl domctl;
+
+        /* try to set address size, domain is always created 64 bit */
+        memset(&domctl, 0, sizeof(domctl));
+        domctl.domain = ctx->domid;
+        domctl.cmd    = XEN_DOMCTL_set_address_size;
+        domctl.u.address_size.size = info->guest_width * 8;
+        rc = do_domctl(xch, &domctl);
+        if ( rc != 0 )
+        {
+            ERROR("Width of guest in stream (%"PRIu32
+                  " bits) differs with existing domain (%"PRIu32" bits)",
+                  info->guest_width * 8, ctx->x86_pv.width * 8);
+            return -1;
+        }
+
+        /* domain informations changed, better to refresh */
+        rc = x86_pv_domain_info(ctx);
+        if ( rc != 0 )
+        {
+            ERROR("Unable to refresh guest informations");
+            return -1;
+        }
     }
     else if ( info->pt_levels != 3 &&
               info->pt_levels != 4 )
diff -r e1f340e7bd25 tools/libxc/saverestore/save_x86_pv.c
--- a/tools/libxc/saverestore/save_x86_pv.c	Mon Apr 07 14:27:02 2014 +0100
+++ b/tools/libxc/saverestore/save_x86_pv.c	Mon Apr 07 14:28:55 2014 +0100
@@ -449,12 +449,26 @@ static int normalise_pagetable(struct co
             xen_last = 271;
         }
     }
-    /* TODO: Support compat guests */
     else
     {
-        ERROR("Don't know how to normalise the pagetables of a %d level guest",
-              ctx->x86_pv.levels);
-        return -1;
+        if ( type == XEN_DOMCTL_PFINFO_L3TAB )
+        {
+            xen_first = L3_PAGETABLE_ENTRIES_PAE;
+            xen_last = PAGE_SIZE / 8 - 1;
+        }
+        else if ( type == XEN_DOMCTL_PFINFO_L2TAB )
+        {
+            unsigned hstart;
+
+            hstart = (HYPERVISOR_VIRT_START_PAE >> L2_PAGETABLE_SHIFT_PAE) & 0x1ff;
+
+            if ( pte_to_frame(ctx, src[hstart]) == ctx->x86_pv.m2p_mfn0 )
+            {
+                /* hvirt starts with xen stuff... */
+                xen_first = hstart;
+                xen_last = PAGE_SIZE / 8 - 1;
+            }
+        }
     }
 
     for ( i = 0; i < (PAGE_SIZE / sizeof(uint64_t)); ++i )
@@ -483,6 +497,15 @@ static int normalise_pagetable(struct co
                 pfn = mfn_to_pfn(ctx, mfn);
 
             update_pte(ctx, &pte, pfn);
+
+            /*
+             * PAE guest L3Es can contain these flags when running on
+             * a 64bit hypervisor. We zap these here to avoid any
+             * surprise at restore time...
+             */
+            if ( (ctx->x86_pv.levels == 3) &&
+                 (type == XEN_DOMCTL_PFINFO_L3TAB) )
+                pte &= ~(_PAGE_USER|_PAGE_RW|_PAGE_ACCESSED);
         }
 
         dst[i] = pte;
