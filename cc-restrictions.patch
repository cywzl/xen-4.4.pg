Extra memory access restrictions for CC evaluations.

1  "A mechanism must be provided for configuring the hypervisor to
disallow shared memory channels between domUs. If the hypervisor is put
into 'disable shared channels mode' and a hypercall is made that would
result in a shared memory channel being set up between domUs then this
call should fail with a defined error code."

2  "A mechanism must be provided for configuring the hypervisor to
disallow domUs from voluntarily returning pages to the hypervisor. If
this hypervisor is put into 'disable voluntarily returned pages' mode
and a hypercall is made by which a guest voluntarily attempting to
return pages, then this call should fail with a defined error code."

Actually enabling these restrictions breaks many things (some PV
kernels, any balloon drivers, v2v channels. etc) but should be OK for
the particular configuration under test.

diff -r 4ea025bedbfa xen/arch/x86/mm.c
--- a/xen/arch/x86/mm.c
+++ b/xen/arch/x86/mm.c
@@ -4604,6 +4604,15 @@ static int xenmem_add_to_physmap_once(
     prev_mfn = mfn_x(get_gfn(d, xatp->gpfn, &p2mt));
     if ( mfn_valid(prev_mfn) )
     {
+        if ( opt_cc_restrictions )
+        {
+            /* CC-restricted guests can't use XATP+aliasing to
+             * sneakily free domain memory */
+            domain_unlock(d);
+            rcu_unlock_domain(d);
+            return -EPERM;
+        }
+
         if ( is_xen_heap_mfn(prev_mfn) )
             /* Xen heap frames are simply unhooked from this phys slot. */
             guest_physmap_remove_page(d, xatp->gpfn, prev_mfn, PAGE_ORDER_4K);
diff -r 4ea025bedbfa xen/arch/x86/setup.c
--- a/xen/arch/x86/setup.c
+++ b/xen/arch/x86/setup.c
@@ -87,6 +87,10 @@ unsigned long __initdata highmem_start;
 size_param("highmem-start", highmem_start);
 #endif
 
+/* CC evaluation more with extra restrictions on guest activity */
+bool_t opt_cc_restrictions = 0;
+boolean_param("cc-restrictions", opt_cc_restrictions);
+
 cpumask_t __read_mostly cpu_present_map;
 
 unsigned long __read_mostly xen_phys_start;
@@ -1365,6 +1369,9 @@ void __init __start_xen(unsigned long mb
                "Multiple initrd candidates, picking module #%u\n",
                initrdidx);
 
+    if ( opt_cc_restrictions )
+        printk("CC restrictions are in force\n");
+
     /*
      * We're going to setup domain0 using the module(s) that we stashed safely
      * above our heap. The second module, if present, is an initrd ramdisk.
diff -r 4ea025bedbfa xen/common/compat/grant_table.c
--- a/xen/common/compat/grant_table.c
+++ b/xen/common/compat/grant_table.c
@@ -59,6 +59,14 @@ int compat_grant_table_op(unsigned int c
     unsigned int i;
     XEN_GUEST_HANDLE_PARAM(void) cnt_uop;
 
+    /* In CC restricted mode, unprivileged guests can't use the grant
+     * table mechanism to access other guests' memory */
+    if ( unlikely(opt_cc_restrictions) &&
+         !is_hardware_domain(current->domain) &&
+         cmd != GNTTABOP_query_size &&
+         cmd != GNTTABOP_setup_table )
+        return -EPERM;
+
     set_xen_guest_handle(cnt_uop, NULL);
     switch ( cmd )
     {
diff -r 4ea025bedbfa xen/common/grant_table.c
--- a/xen/common/grant_table.c
+++ b/xen/common/grant_table.c
@@ -2433,6 +2433,14 @@ do_grant_table_op(
     if ( (int)count < 0 )
         return -EINVAL;
     
+    /* In CC restricted mode, unprivileged guests can't use the grant
+     * table mechanism to access other guests' memory */
+    if ( unlikely(opt_cc_restrictions) &&
+         !is_hardware_domain(current->domain) &&
+         cmd != GNTTABOP_query_size &&
+         cmd != GNTTABOP_setup_table )
+        return -EPERM;
+
     rc = -EFAULT;
     switch ( cmd )
     {
diff -r 4ea025bedbfa xen/common/memory.c
--- a/xen/common/memory.c
+++ b/xen/common/memory.c
@@ -553,6 +553,13 @@ long do_memory_op(unsigned long cmd, XEN
     domid_t domid;
     int op = cmd & MEMOP_CMD_MASK;
 
+    /* In CC restricted mode, unprivileged guests can't voluntarily
+     * return memory to Xen. */
+    if ( unlikely(opt_cc_restrictions) &&
+         !is_hardware_domain(current->domain) &&
+         (op == XENMEM_decrease_reservation || op == XENMEM_exchange) )
+        return -EPERM;
+
     switch ( op )
     {
     case XENMEM_increase_reservation:
diff -r 4ea025bedbfa xen/include/xen/mm.h
--- a/xen/include/xen/mm.h
+++ b/xen/include/xen/mm.h
@@ -367,4 +367,8 @@ int guest_remove_page(struct domain *d, 
 /* TRUE if the whole page at @mfn is of the requested RAM type(s) above. */
 int page_is_ram_type(unsigned long mfn, unsigned long mem_type);
 
+/* CC evaluation mode.  If set, unprivileged guests can't relinquish
+ * memory, or use grant tables to access other guests' memory. */
+extern bool_t opt_cc_restrictions;
+
 #endif /* __XEN_MM_H__ */
