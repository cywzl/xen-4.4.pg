# HG changeset patch
# Parent 9608ad5a12c3e0970b47720d5b05f8e7be805118

diff -r 9608ad5a12c3 xen/arch/x86/crash.c
--- a/xen/arch/x86/crash.c
+++ b/xen/arch/x86/crash.c
@@ -33,12 +33,15 @@
 
 static cpumask_t waiting_to_crash;
 static unsigned int crashing_cpu;
+static s_time_t callin_done = 0;
 static DEFINE_PER_CPU_READ_MOSTLY(bool_t, crash_save_done);
 
 /* This becomes the NMI handler for non-crashing CPUs, when Xen is crashing. */
 void do_nmi_crash(struct cpu_user_regs *regs)
 {
     int cpu = smp_processor_id();
+    volatile s_time_t __maybe_unused data[] =
+        { 0xffff00123400ffffUL, 0UL, 0UL, 0xffff00432100ffffUL};
 
     /* nmi_shootdown_cpus() should ensure that this assertion is correct. */
     ASSERT(cpu != crashing_cpu);
@@ -67,6 +70,17 @@ void do_nmi_crash(struct cpu_user_regs *
 
         this_cpu(crash_save_done) = 1;
         cpumask_clear_cpu(cpu, &waiting_to_crash);
+
+        rmb();
+        if ( callin_done )
+        {
+            s_time_t now = NOW();
+            data[1] = now;
+            data[2] = now - callin_done;
+
+            printk("**Late callin: cpu%u, now %"PRId64", delta %"PRId64"\n",
+                   cpu, now, now - callin_done);
+        }
     }
 
     /* Poor mans self_nmi().  __stop_this_cpu() has reverted the LAPIC
@@ -181,6 +195,9 @@ static void nmi_shootdown_cpus(void)
         printk("Failed to shoot down CPUs {%s}\n", keyhandler_scratch);
     }
 
+    callin_done = NOW();
+    wmb();
+
     /* Crash shutdown any IOMMU functionality as the crashdump kernel is not
      * happy when booting if interrupt/dma remapping is still enabled */
     iommu_crash_shutdown();
